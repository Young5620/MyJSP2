HTTP : 프로토콜
  - text기반의 프로토콜

  HTTP의 서버에 정보를 전송하거나 요청하는 방식 2가지(DATA처리방식)

   1) GET방식
   - 서버에 데이터를 요청하는 용도 (request)
   - 전송하는 데이터 URL에 포함되어 전달됨
    ex) http://localhost/login.jsp?id=user&pw=pass
   - 전송했던 데이터는 브라우저의 히스토리에 접속했을 경우에 남아있음
     (보안성이 취약)
   - 게시판 글 조회, 검색 같이 서버에 정보를 가져올 필요가 있을 경우
   - 전송할 수 있는 최대 크기가 브라우저별로 다르지만 정해져있다.(4kbyte=4096byte)
   - HTML form태그가 꼭 필요한 것은 아니다.


   2) POST방식 
   - 서버에 데이터를 전송하는 용도
   - 전송되는 데이터가 URL에 표시되지않고, 객체의 메세지 body를 통해서 전달됨
   - 브라우저에 전달되는 데이터가 남지 않기 때문에 보안성이 GET보다 강하다.
   - 비밀번호나 주민번호 등 Private한 정보를 서버에 전송해야 할 때 사용
   - 반드시 HTML form태그를 사용해서 처리해야함(**)
   - 데이터의 양의 제한이 없기 때문에 대량의 데이터를 전송할 수 있음

==========================================================

## Request 객체(내장객체)

 - 웹 브라우저를 통해 서버에 어떤 정보를 요청하는 것을 Request라고 하고, 이 때 
   요청 정보를 담아 관리하는 객체를 'Request'라고 한다.

 제공하는 기능
 1. 클라이언트와 관련된 정보읽기
 2. 서버와 관련된 정보 읽기 기능
 3. 클라이언트가 전송한 요청 파라미터 읽기
 4. 클라이언트가 전송한 쿠키읽기 기능(웹 세션)

 **Request 객체 관련 주요 메서드
 1) getContextPath() : String - 웹 어플리케이션의 컨텍스트 루트의 경로
 2) getMethod() : String - 웹 브라우저가 정보를 전송할 때 사용한 방식
 3) getServerName() : String - 연결할 때 사용한 서버이름
 4) getServerPort() : int - 서버가 실행중인 포트 번호
 5) getRequestURL() : StringBuffer - 요청 URL을 얻는다.
 6) getRequestURI() : String - 요청 URI를 얻는다.
 7) getRemoteAddr() : String - 웹 서버에 연결한 클라이언트 IP주소
 8) getProtocol() : String - 해당 프로토콜
 9) getParemeter(name) : 이름이 name인 파라미터 값을 구한다. 
                                존재하지 않을 경우 null을 반환
 10) gerParameterValues(name) : 이름이 name인 모든 파라미터 값들을 배열로 구한다. 
                                         존재하지 않을 경우 null을 반환 (checkbox)

 참조 : https://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequest.html

==========================================================

## PATH
 - 웹에서 접근하는 경로

  1. 절대경로 : 프로젝트 전체경로(port번호를 제외한 "/"컨텍스트로 경로를 참조하는 경우)
  	      기준 - "/"
  2. 상대경로 : 현재위치에서 다른 파일의 경로를 참조
	      기준 - 현재 작업위치

==========================================================

## Response 객체

 - 웹 브라우저의 요청에 응답하는 것을 의미함
 - 응답 정보를 가지고 있는 객체를 response 객체라고 한다.

 ** Response 객체 관련 메서드
  1) getCharacterEncoding() : 응답할 때의 문자 인코딩 형태를 구함
  2) addCookie() : 쿠키를 지정
  3) sendRedirect() : 지정한 URL로 이동

==========================================================

## out 객체
 - JSP페이지가 생성하는 모든 내용은 out 기본객체를 통해 전송됨.
 - JSP페이지 내에서 사용하는 비스크립트 요소들(HTML코드, TEXT)이 out객체에 전달
 - 값을 출력하는 표현식의 결과값도 out객체에 전달됩니다.
 - 표현식으로 대체합니다.

==========================================================

## 쿠키와 세션

### 쿠키(Cookie) (TCP, OSS)
 - 웹브라우저에서 서버로 어떤 데이터를 요청하면, 서버측에서는 알맞은 로직을 수행한후
   데이터를 웹브라우저에 응답
 - HTTP프로토콜은 응답 후에 웹브라우저와의 관계를 종료합니다.(통신세션종료-TCP세션종료)
 - 연결이 끊겼을 때(TCP세션종료시에), 
   어떤 정보를 지속적으로 유지하기 위한 수단으로 "쿠키"라는 방식을 사용 
 - 쿠키는 서버에서 생성하여, 서버가 아닌 클라이언트측에 정보를 저장
    (저장위치는 메모리 또는 저장장치(HDD))
 - 서버에서 요청할 때마다 쿠키의 속성값을 참조 또는 변경할 수 있다.
 - 쿠키는 개당 4kb로 용량이 제한적이며, 300개까지(1.2MB)데이터 정보를 가질 수 있다.

 ** 쿠키 객체 관련 메서드

===========================================================

## 쿠키 vs 세션
 - 쿠키 대신에 세션을 사용하는 이유
   "세션이 쿠키보다 보안에서 앞서기 때문"
 - 쿠키의 이름이나 데이터는 네트워크를 통해서 전달되기 때문에 HTTP프로토콜을 사용하는
   경우에는 중간에 값을 읽을 수 있음(MiTM-중간자공격)
 - 세션은 오직 서버에서만 저장되기 때문에 중요한 데이터를 저장하기에 좋습니다.
 - 세셔늘 사용하는 또 다른 이유는 웹브라우저가 쿠키를 지원하지 않거나 강제로 사용자가
   쿠키를 차단한 경우에도 사용할 수 있다는 점입니다.
 - 하지만 여러 서버에서 공유할 수 없는 단점이 있다. 쿠키는 도메인을 이용해 쿠키를 여러 
   도메인에서 공유할 수 있기 때문에 Naver,Daum과 같은 포털사이트들은 쿠키에 로그인
   방식을 저장하는 것을 선호합니다.

===========================================================

###application 객체
 - 특정 웹어플리케이션에 포함된 모든 JSP페이지는 하나의 Application기본 객체를 공유
 - application객체는 웹어플리케이션 전반에 걸쳐서 사용되는 정보를 담고 있다.

**생명주기
 - Container에서 정보를 처리할 경우에 해당 정보를 유지하는 기간을 의미
 - request : 요청영역마다 생성되어 해당 페이지에서 끝남
 - session : 브라우저별로 생성되어 브라우저 종료되면 끝남
 - application : 프로그램 전체에서 딱 한번 최초 가동시 생성 
